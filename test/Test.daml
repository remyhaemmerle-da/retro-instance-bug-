module Test where

import Template
import Interface

import DA.Time

import Daml.Script

waitFor : (Template a, HasAgreement a) => Party -> ContractId a -> Int -> Script ()
waitFor _ _ 0 = error ("give up ")
waitFor p cid n =
  do
    mbCid <- queryContractId p cid
    case mbCid of
     None -> do
       sleep (seconds 1)
       waitFor p cid (n -1)
     Some _ -> pure ()

setup1 = script do
-- user_setup_begin
  alice <- allocateParty "alice"
--  aliceId <- validateUserId "Alice"
--  createUser (User aliceId (Some alice)) [CanActAs alice]
  pure alice

setup2:  Party -> Script (Party, Party)
setup2 alice = script do
  bob <- allocatePartyOn "bob" (ParticipantName "participant2")
--  bobId <- validateUserId "Bob"
--  createUserOn (User bobId (Some bob)) [CanActAs bob] (ParticipantName "participant1")
  pure (alice, bob)

proposal1:  (Party, Party) -> Script (ContractId P, Party, Party)
proposal1 (alice, bob) = script do
-- user_setup_end
  cid <- submit alice do
    createCmd (P alice bob)
  pure (cid, alice, bob)

accept2 : (ContractId P, Party, Party) -> Script (ContractId T, Party, Party)
accept2 (cid, alice, bob) = script do
  cid <- submit bob do exerciseCmd cid (Accept)
  pure (cid, alice, bob)

bug2 : (ContractId T, Party, Party) -> Script ()
bug2 (cid, alice, bob) = script do
  submit alice do
    exerciseCmd (toInterfaceContractId @I cid) (Noop alice)

  -- waitFor alice cid 10
  -- _ <-
  -- pure cid


